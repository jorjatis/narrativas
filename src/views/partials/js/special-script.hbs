<script>
document.addEventListener("DOMContentLoaded", () => {
  // ----------------------------------------
  // CONFIGURACIÓN Y UTILIDADES
  // ----------------------------------------
  const PARTICULAS = ["de", "del", "de la", "de los", "de las", "la", "los", "las", "y"];
  const SHEET_ID = "1H6SJVE9WEXakWdyIU_TU2ZUoxyF7pxeTZsq0IZOOv70";
  const SHEET_NAME = "datos";

  const qs = (sel, ctx = document) => ctx.querySelector(sel);
  const qsa = (sel, ctx = document) => [...ctx.querySelectorAll(sel)];

  const normalizeText = (txt = "") =>
    txt.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase().trim();

  const crearSlug = (nombre = "") =>
    normalizeText(nombre)
      .split(/\s+/)
      .filter(p => !PARTICULAS.includes(p))
      .join("-");

  const delay = ms => new Promise(res => setTimeout(res, ms));

  // ----------------------------------------
  // GENERAR SLUGS PARA LOS NOMBRES
  // ----------------------------------------
  const spans = qsa(".v-spc-names span");

  spans.forEach(span => {
    const nombre = span.textContent.replace(/[, ]+$/, "").trim();
    span.dataset.target = crearSlug(nombre);
  });

  // ----------------------------------------
  // ANIMACION SCROLL NOMBRE MURO - IMAGEN MURO
  // ----------------------------------------
  spans.forEach(span => {
    span.addEventListener("click", () => {
      const target = span.dataset.target;
      const el = qs(`.v-spc-faces__itm[popovertarget="${target}"]`);
      if (!el) return;

      el.scrollIntoView({ behavior: "smooth", block: "center" });
      el.classList.add("found");
      setTimeout(() => el.classList.remove("found"), 3000);
    });
  });

  // ----------------------------------------
  // CARGAR DATOS DESDE GOOGLE SHEETS
  // ----------------------------------------
  async function fetchSheetData() {
    const url = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?tqx=out:json&sheet=${SHEET_NAME}`;
    try {
      const res = await fetch(url);
      const text = await res.text();

      const json = text
        .replace(/^[\s\S]*?google\.visualization\.Query\.setResponse\(/, "")
        .replace(/\);?\s*$/, "");

      const data = JSON.parse(json);
      if (!data.table?.rows) return [];

      // helper para leer celdas sin romper
      const getCell = (row, idx) => row.c[idx]?.v ?? "";

      return data.table.rows.slice(8).map(r => {
        const fotoFlag = getCell(r, 0);
        const nombreCompleto = getCell(r, 1);
        const desc = getCell(r, 2);
        const age = getCell(r, 10) || "Edad no disponible";
        const location = getCell(r, 11) || "Ubicación no disponible";

        // Extraer número y nombre
        const match = nombreCompleto.match(/^(\d+)\.\s*(.*)/);
        const numero = match?.[1] || "";
        const nombre = match?.[2] || nombreCompleto;

        const slug = crearSlug(nombre);
        const slugImg = normalizeText(nombre).replace(/\s+/g, "_");
        const imgBase = numero ? `${numero}_${slugImg}` : slugImg;

        return {
          nombre,
          slug,
          desc,
          age,
          location,
          foto: fotoFlag.toUpperCase?.() === "SI"
            ? `assets/images/fotos/${imgBase}.jpg`
            : "assets/images/no-photo.jpg"
        };
      });
    } catch (err) {
      console.error("Error al leer la hoja pública:", err);
      return [];
    }
  }

  // ----------------------------------------
  // POPOVER CONTROL
  // ----------------------------------------
  const openPopover = pop => {
    document.body.classList.add("is-overflow");
    pop.classList.add("is-open");
  };

  const closePopover = pop => {
    document.body.classList.remove("is-overflow");
    pop.classList.remove("is-open");
  };

  document.addEventListener("click", e => {
    const pop = qs(".v-spc-pop");
    if (!pop) return;
    const insidePopover = pop.contains(e.target);
    const faceItem = e.target.closest(".v-spc-faces__itm");
    if (document.body.classList.contains("is-overflow") && !insidePopover && !faceItem) {
      closePopover(pop);
    }
  });

  // ----------------------------------------
  // CREAR GRID DE PERSONAS
  // ----------------------------------------
  async function initGrid() {
    const loader = qs(".v-spc-loader");
    const grid = qs(".v-spc-faces-grid");

    loader.style.display = "block";
    const people = await fetchSheetData();

    for (const person of people) {
      const btn = document.createElement("button");
      btn.className = "v-spc-faces__itm is-hidden";
      btn.setAttribute("popovertarget", person.slug);

      btn.innerHTML = `
        <figure class="v-spc-faces__img">
          <img src="${person.foto}" alt="${person.nombre}">
        </figure>
        <span class="v-spc-faces__name">${person.nombre}</span>
      `;

      grid.appendChild(btn);

      btn.addEventListener("click", () => {
        // Verificar si hay datos reales
        const hasDesc = person.desc && person.desc.trim() !== "";
        const hasAge = person.age && !/Edad no disponible/i.test(person.age);
        const hasLoc = person.location && !/Ubicación no disponible/i.test(person.location);

        // Si no hay ningún dato, no hacer nada (sin popover)
        if (!hasDesc && !hasAge && !hasLoc) return;

        const pop = qs(".v-spc-pop");
        if (!pop) return;

        Object.assign(pop, { id: person.slug });

        qs("#pop-img", pop).src = person.foto;
        qs("#pop-img", pop).alt = person.nombre;
        qs("#pop-name", pop).textContent = person.nombre;

        // Rellenar campos solo si existen
        qs("#pop-age", pop).textContent = hasAge ? person.age : "";
        qs("#pop-loc", pop).textContent = hasLoc ? person.location : "";
        qs("#pop-desc", pop).textContent = hasDesc ? person.desc : "";

        // Ocultar visualmente los elementos vacíos (opcional)
        qs("#pop-age", pop).style.display = hasAge ? "" : "none";
        qs("#pop-loc", pop).style.display = hasLoc ? "" : "none";
        qs("#pop-desc", pop).style.display = hasDesc ? "" : "none";

        const closeBtn = qs(".v-x", pop);
        closeBtn.setAttribute("popovertarget", person.slug);
        closeBtn.addEventListener("click", () => closePopover(pop), { once: true });

        openPopover(pop);
      });
    }

    // Esperar imágenes
    await Promise.all(qsa(".v-spc-faces__img img", grid).map(img =>
      new Promise(resolve => (img.onload = img.onerror = resolve))
    ));

    loader.style.display = "none";

    // Animación de aparición escalonada
    qsa(".v-spc-faces__itm", grid).forEach((item, i) =>
      setTimeout(() => item.classList.remove("is-hidden"), i * 20)
    );
  }

  initGrid();

  // ----------------------------------------
  // FILTRO DE BÚSQUEDA
  // ----------------------------------------
  const buscador = qs("#buscador");
  if (buscador) {
    buscador.addEventListener("input", () => {
      const query = normalizeText(buscador.value);
      qsa(".v-spc-faces__itm").forEach(item => {
        const nombre = normalizeText(qs(".v-spc-faces__name", item).textContent);
        item.classList.toggle("hidden", query && !nombre.startsWith(query));
      });
    });
  }

  // ----------------------------------------
  // ANIMACIÓN INICIAL DE NOMBRES
  // ----------------------------------------
  const totalDuration = 5000;
  const delayStep = totalDuration / spans.length;
  qsa(".v-spc-names span")
    .sort(() => Math.random() - 0.5)
    .forEach((span, i) => setTimeout(() => span.classList.add("visible"), i * delayStep));
  });
</script>
