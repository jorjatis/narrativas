<script>
  document.addEventListener("DOMContentLoaded", async () => {

    const CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vSqgue7-yB0O5ERkCtZKhBfS-jaSRBbO31WlJjxjlh2SvDLb38fLcTpn6kbYxqCFIasbR9HBl1Yl2WA/pub?gid=0&single=true&output=csv";
    const qs = (sel, ctx = document) => ctx.querySelector(sel);
    const qsa = (sel, ctx = document) => [...ctx.querySelectorAll(sel)];

    // ----------------------------------------
    // UTILIDADES
    // ----------------------------------------
    function limpiarNombreSlug(rawName) {
      return rawName
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/游릭|游댮/g, "")
        .replace(/-\s*hija del n칰mero\s*\d+\s*-/i, "")
        .replace(/-\s*.*-$/i, "")
        .trim();
    }

    function limpiarNombreVisible(rawName) {
      return rawName.replace(/游릭|游댮/g, "").trim();
    }

    function crearSlug(nombre = "") {
      return nombre
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .toLowerCase()
        .split(/\s+/)
        .filter(p => !["de", "del", "de la", "de los", "de las", "la", "los", "las", "y"].includes(p))
        .join("-");
    }

    function parseCSV(csvText) {
      const rows = [];
      const lines = csvText.split("\n");
      for (let line of lines) {
        const row = [];
        let match;
        const regex = /"(.*?)"|([^,]+)/g;
        while ((match = regex.exec(line)) !== null) {
          row.push(match[1] !== undefined ? match[1] : (match[2] || ""));
        }
        rows.push(row);
      }
      return rows;
    }

    // ----------------------------------------
    // CARGAR CSV Y PROCESAR DATOS
    // ----------------------------------------
    async function fetchPeople() {
      const PROXY = "https://corsproxy.io/?";
      const res = await fetch(PROXY + encodeURIComponent(CSV_URL));
      const csvText = await res.text();
      const rows = parseCSV(csvText);

      const people = [];
      for (let i = 8; i < rows.length; i++) {
        const row = rows[i];

        const fotoFlag = (row[0] || "").toUpperCase();
        let nombreRaw = "";
        for (let col of row) {
          if (/^\d+\./.test(col?.trim())) {
            nombreRaw = col.trim();
            break;
          }
        }
        if (!nombreRaw) continue;

        const match = nombreRaw.match(/^\d+\.\s*(.*)/);
        const nombreVisible = match ? limpiarNombreVisible(match[1]) : limpiarNombreVisible(nombreRaw);
        const nombreSlug = limpiarNombreSlug(nombreVisible);
        if (!nombreVisible) continue;

        const slug = crearSlug(nombreSlug);
        const numero = match ? match[0].split(".")[0] : "";
        let slugImg = nombreSlug.normalize("NFD").replace(/[\u0300-\u036f]/g, "").toLowerCase().replace(/\s+/g, "_").replace(/[^a-z0-9_]/g, "");
        slugImg = slugImg.replace(/^_+|_+$/g, "");
        const imgBase = numero ? `${numero}_${slugImg}` : slugImg;
        const foto = (fotoFlag === "SI") ? `assets/images/fotos/${imgBase}.jpg` : "assets/images/no-photo.jpg";

        // Extraer edad desde la descripci칩n si aparece "XX a침os"
        const descRaw = row[2] || "";
        const ageMatch = descRaw.match(/(\d+)\s*a침os/);
        const age = ageMatch ? ageMatch[1] + " a침os" : "";

        const location = ""; // Si se obtiene de otra columna, agregar aqu칤

        people.push({ nombreVisible, slug, foto, desc: descRaw, age, location });
      }

      people.sort((a, b) => a.nombreVisible.localeCompare(b.nombreVisible, 'es', { sensitivity: 'base' }));

      return people;
    }

    // ----------------------------------------
    // POPUP CONTROL
    // ----------------------------------------
    const pop = qs(".v-spc-pop");
    const closeBtn = qs(".v-x", pop);

    const closePopover = () => {
      // Limpiar datos internos
      const img = qs("#pop-img", pop);
      const name = qs("#pop-name", pop);
      const age = qs("#pop-age", pop);
      const loc = qs("#pop-loc", pop);
      const desc = qs("#pop-desc", pop);

      if (img) { img.src = ""; img.alt = ""; }
      if (name) name.textContent = "";
      if (age) { age.textContent = ""; age.style.display = "none"; }
      if (loc) { loc.textContent = ""; loc.style.display = "none"; }
      if (desc) { desc.textContent = ""; }

      // Limpiar id y atributos
      pop.id = "";
      closeBtn.setAttribute("popovertarget", "");

      // Quitar clases y estilos para cerrar visualmente
      document.body.classList.remove("is-overflow");
      pop.classList.remove("is-open");

      // Opcional: si usas transiciones CSS con opacity/visibility
      pop.style.display = "none";
    };

    // Listener 칰nico para cerrar
    closeBtn.addEventListener("click", closePopover);

    const openPopover = pop => {
      pop.style.display = ""; // o "block"
      pop.classList.add("is-open");
      document.body.classList.add("is-overflow");
    };

    document.addEventListener("click", (e) => {
      const insidePopover = pop.contains(e.target);
      const faceItem = e.target.closest(".v-spc-faces__itm");
      if (document.body.classList.contains("is-overflow") && !insidePopover && !faceItem) {
        closePopover();
      }
    });

    // ----------------------------------------
    // INICIALIZAR NOMBRES, GRID Y POPUP
    // ----------------------------------------
    async function init() {
      const loader = qs(".v-spc-loader");
      const namesContainer = qs(".v-spc-names");
      const grid = qs(".v-spc-faces-grid");

      loader.style.display = "block";
      const people = await fetchPeople();
      namesContainer.innerHTML = "";
      grid.innerHTML = "";

      // --- NOMBRES ---
      people.forEach((person, index) => {
        const span = document.createElement("span");
        span.textContent = index === people.length - 1
          ? person.nombreVisible
          : person.nombreVisible + ", ";
        span.dataset.target = person.slug;
        namesContainer.appendChild(span);
      });

      // --- GRID DE FOTOS ---
      people.forEach(person => {
        const btn = document.createElement("button");
        btn.className = "v-spc-faces__itm is-hidden";
        btn.setAttribute("popovertarget", person.slug);

        btn.innerHTML = `
        <figure class="v-spc-faces__img">
          <img src="${person.foto}" alt="${person.nombreVisible}">
        </figure>
        <span class="v-spc-faces__name">${person.nombreVisible}</span>
      `;

        // --- CLICK POPUP SOLO SI HAY DESCRIPCI칍N V츼LIDA ---
        const descLimpia = person.desc?.trim();
        const tieneDescReal = descLimpia && !/^(-{3,}|\/{3,})\s*$/.test(descLimpia);

        if (tieneDescReal) {
          btn.addEventListener("click", () => {
            closePopover(); // Limpiar antes de abrir nuevo
            pop.id = person.slug;
            closeBtn.setAttribute("popovertarget", person.slug);

            qs("#pop-img", pop).src = person.foto;
            qs("#pop-img", pop).alt = person.nombreVisible;
            qs("#pop-name", pop).textContent = person.nombreVisible;

            const ageSpan = qs("#pop-age", pop);
            if (person.age && !/Edad no disponible/.test(person.age)) {
              ageSpan.textContent = person.age;
              ageSpan.style.display = "";
            } else {
              ageSpan.textContent = "";
              ageSpan.style.display = "none"; // ocultamos en vez de remover
            }

            const locSpan = qs("#pop-loc", pop);
            if (person.location && !/Ubicaci칩n no disponible/.test(person.location)) {
              locSpan.textContent = person.location;
              locSpan.style.display = "";
            } else {
              locSpan.textContent = "";
              locSpan.style.display = "none"; // ocultamos en vez de remover
            }

            qs("#pop-desc", pop).textContent = descLimpia;

            openPopover(pop);
          });
        }

        grid.appendChild(btn);
      });

      // Esperar que carguen las im치genes
      await Promise.all(qsa("img", grid).map(img => new Promise(res => img.onload = img.onerror = res)));
      loader.style.display = "none";

      // --- Animaci칩n Nombres ---
      const spans = qsa(".v-spc-names span");
      const totalDuration = 5000;
      const delayStep = totalDuration / spans.length;
      spans.sort(() => Math.random() - 0.5)
        .forEach((span, i) => setTimeout(() => span.classList.add("visible"), i * delayStep));

      // --- Scroll a la imagen desde el nombre ---
      spans.forEach(span => {
        span.addEventListener("click", () => {
          const target = span.dataset.target;
          const el = qs(`.v-spc-faces__itm[popovertarget="${target}"]`);
          if (!el) return;
          el.scrollIntoView({ behavior: "smooth", block: "center" });
          el.classList.add("found");
          setTimeout(() => el.classList.remove("found"), 3000);
        });
      });

      // --- Animaci칩n Grid ---
      qsa(".v-spc-faces__itm", grid).forEach((item, i) =>
        setTimeout(() => item.classList.remove("is-hidden"), i * 20)
      );
    }

    init();

  });
</script>